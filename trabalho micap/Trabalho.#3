/* Alunos: 	Thiago Edgar Bauce Venancio
			Raphaela Brites Cabrera
			Geovani de Oliveira Lima*/
#include "def_pinos.h"
#include "configTrab.c"
unsigned char readdata[2];
#define  DQ P2_7

#include "fonte.c"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#define NOP2() NOP();NOP()
#define NOP4() NOP();NOP();NOP();NOP() //160
#define NOP5() NOP();NOP();NOP();NOP();NOP() //200
#define NOP8() NOP4();NOP4() //320
#define NOP10() NOP5();NOP5() //400

#define CS1 P2_0
#define CS2 P2_1
#define RS P2_2 //HOLD
#define RW P2_3 //CS
#define E P2_4
#define RST P2_5
#define DB P4
#define READ 1
#define WRITE 0
#define CO 0 //comando
#define DA 1 //dado
#define ESQ 0
#define DIR 1

#define R 1
#define W 0

unsigned char busyflag;
unsigned char datn,count;
__code unsigned char dat[9];
 
float word1;

#define FALSE 0
#define TRUE 1

#define PERIOD 10

__code unsigned char ROM[8]; // ROM Bit
unsigned char lastDiscrep = 0; // last discrepancy
unsigned char doneFlag = 0; // Done flag
__code unsigned char FoundROM[2][8]; // table of found ROM codes
unsigned char numROMs;
unsigned char dowcrc;
int time = 101;
int i,numDev;
__code int scratch[9];


/////////////////end of variable////////////

///////////////ds18b20/////////////////////
//Delay function
void delay(unsigned int i)
{
    while(i--);
}
 
void delay_ms(int j)
{
	unsigned char i;

	for(;j;j--)
for(i=122;i<=0;i--);
}

void delay_us(int us)
{
	int i;
	for (i=0; i<us; i++);
}


// OW_RESET - performs a reset on the one-wire bus and
// returns the presence detect. Reset is 480us, so delay
// value is (480-24)/16 = 28.5 - we use 29. Presence checked
// another 70us later, so delay is (70-24)/16 = 2.875 - we use 3.
//
unsigned int ow_reset(void)
{
	unsigned int presence;
	DQ = 0; //pull DQ line low
	delay_us(29); // leave it low for 480us
	DQ = 1; // allow line to return high
	delay_us(3); // wait for presence
	presence = DQ; // get presence signal
	delay_us(25); // wait for end of timeslot
	return(presence); // presence signal returned
} // 0=presence, 1 = no part

//Initialization function
void Init_DS18B20(void)
{
    unsigned char x=0;
    DQ = 1;    //DQ reset
    delay(8);  //Slight delay
    DQ = 0;    //SCM will be pulled down DQ
    delay(80); //Accurate than 480us delay
    DQ = 1;    //Pulled the bus
    delay(14);
    x=DQ;      //After slight delay is initialized if x = 0 x = 1 is initialized successfully defeat
    delay(20);
}
 
//Reading a byte
unsigned char ReadOneChar(void)
{
    unsigned char i=0;
    unsigned char dat = 0;
    for (i=8;i>0;i--)
    {
      DQ = 0; // To the pulse signal
      delay(2);
      DQ = 1; // To the pulse signal
      if(DQ)
      	dat |= 1<<i;
      delay(4);
    }
    return(dat);
}

// READ_BIT - reads a bit from the one-wire bus. The delay
// required for a read is 15us, so the DELAY routine won't work.
// We put our own delay function in this routine in the form of a
// for() loop.
//
unsigned char read_bit(void)
{
	unsigned char i;
	DQ = 0; // pull DQ low to start timeslot
	DQ = 1; // then return high
	for (i=0; i<3; i++); // delay 15us from start of timeslot
	return(DQ); // return value of DQ line
}

void write_bit(char bitval)
{
	DQ = 0; // pull DQ low to start timeslot
	if(bitval==1) DQ =1; // return DQ high if write 1
	delay_us(5); // hold value for remainder of timeslot
	DQ = 1;
}// Delay provides 16us per loop, plus 24us. Therefore delay(5) = 104us



//Write a byte
void WriteOneChar(unsigned char dat)
{
    unsigned char i=0;
    for (i=8; i>0; i--)
    {
      DQ = 0;
      DQ = dat&0x01;
      delay(5);
      DQ = 1;
      dat>>=1;
    }
    delay(4);
}

// NEXT
// The Next function searches for the next device on the 1-Wire bus. If
// there are no more devices on the 1-Wire then false is returned.
//
unsigned char Next(void)
{
	unsigned char m = 1; // ROM Bit index
	unsigned char n = 0; // ROM Byte index
	unsigned char k = 1; // bit mask
	unsigned char x = 0;
	unsigned char discrepMarker = 0; // discrepancy marker
	unsigned char nxt; // return value
	int flag;
	nxt = FALSE; // set the next flag to false
	dowcrc = 0; // reset the dowcrc
	flag = ow_reset(); // reset the 1-Wire
	if(flag||doneFlag) // no parts -> return false
	{
		lastDiscrep = 0; // reset the search
		return FALSE;
	}
	return nxt;
}

// FIRST
// The First function resets the current state of a ROM search and calls
// Next to find the first device on the 1-Wire bus.
//
unsigned char First(void)
{
	lastDiscrep = 0; // reset the rom search last discrepancy global
	doneFlag = FALSE;
	return Next(); 
}

/*
void Read_ROMCode(void)
{
	int n;

	ow_reset();
	WriteOneChar(0x33);
	for (n=0;n<8;n++){dat[n]=ReadOneChar();}
	
}
*/
// Perform Match ROM
unsigned char Send_MatchRom(void)
{
	unsigned char i;
	if(ow_reset()) return 0;
		WriteOneChar(0x55); // match ROM
	for(i=0;i<8;i++)
	{
		WriteOneChar(FoundROM[numROMs][i]); //send ROM code
	}
	return 1;
}

/*
void Read_ScratchPad(void)
{
	int j;
	char pad[9];
	WriteOneChar(0xBE);
	for (j=0;j<9;j++)
	{
		pad[j]=ReadOneChar();
	}
}
*/

//Read temperature
void  ReadTemperature(void)
{
    Init_DS18B20();
    WriteOneChar(0xCC); // Skip read serial number column number of operations
    WriteOneChar(0x44); // Start temperature conversion
    Init_DS18B20();
    WriteOneChar(0xCC); //Skip read serial number column number of operations
    WriteOneChar(0xBE); //Read the temperature register, etc. (a total of 9 registers readable) is the temperature of the first two
    readdata[0]=ReadOneChar();
    readdata[1]=ReadOneChar();
   
}

void Tempprocess() //Temperature Conversion
{
    unsigned int t;
    float tt;
    unsigned char temp;
    if((readdata[1]&0x80)!=0)
    {
        t=readdata[1];
        t<<=8;
        t=t|readdata[0];
        t=t-1;
        t=~t;
        t>>=4;
        word1=t;
        temp=readdata[0];
        temp=temp-1;
        temp=~temp;
        temp=temp&0x0f;
        tt=temp*0.0625;
 		word1+=tt;
    }
    else
    {
        t=readdata[1];
        t<<=8;
        t=t|readdata[0];
        t=t-1;
        t=~t;
        t>>=4;
        word1=t;
        temp=readdata[0];
        temp=temp-1;
        temp=~temp;
        temp=temp&0x0f;
        tt=temp*0.0625;
 		word1+=tt;
    }
}
/////////////////////end  of ds18b20//////////////////

/////////////////////GLCD//////////////////
unsigned char le_glcd(__bit cd, __bit cs){
	unsigned char var;
	RW = 1;
	RS = cd;
	CS1 = cs;
	CS2 = !cs;
	NOP4();		//Espera 160ns
	E =1;
	NOP8();		//Espera 320ns
	SFRPAGE=CONFIG_PAGE;
	var = DB;
	SFRPAGE=LEGACY_PAGE;
	NOP4();		//Espera 160ns (160 + 320 = 480 >450)
	E = 0;	
	NOP10();NOP2();		//Espera 480ns
	return var;
}

void esc_glcd(unsigned char byte,__bit cd,__bit cs){
	while(le_glcd(CO,cs) & 0x80);
	RW = 0;
	CS1 = cs;
	CS2 = !cs;
	RS = cd;
	SFRPAGE=CONFIG_PAGE;
	DB = byte;
	SFRPAGE=LEGACY_PAGE;
	NOP4();
	E =1;
	NOP10();NOP2();		//Espera 320ns
	E = 0;
	SFRPAGE=CONFIG_PAGE;
	DB = 0XFF;			//como escreve na porta, tem que voltar as portas para 1
	SFRPAGE=LEGACY_PAGE;
	RW = 1;
	NOP10();NOP2();
}

void init_glcd(void){
	E 	=  0;
	RST =  1; 
	CS1 =  1;
	CS2 =  !1;
	SFRPAGE=CONFIG_PAGE;
	DB 	=	0XFF;
	SFRPAGE=LEGACY_PAGE;	
	while(le_glcd(CO,ESQ)&0x10);
	while(le_glcd(CO,DIR)&0x10); //1101111 sai qd rsr for 1
	esc_glcd(0x3F,CO,ESQ); //liga o controlador 1
	esc_glcd(0x3F,CO,DIR); //liga o controlador 2
	esc_glcd(0x40,CO,ESQ); //End Y = 0;
	esc_glcd(0xB8,CO,ESQ); //End X = 0; pagina
	esc_glcd(0xC0,CO,ESQ); //End Z = 0;
	esc_glcd(0x40,CO,DIR); //End Y = 0;	
	esc_glcd(0xB8,CO,DIR); //End X = 0; pagina
	esc_glcd(0xC0,CO,DIR); //End Z = 0;
}

void conf_y(unsigned char y, __bit cs){
	y &= 0x3f;	
	esc_glcd(0x40 | y,CO,cs);
}

void conf_pag(unsigned char pag, __bit cs){
	pag &= 0x07;
	esc_glcd(0xb8 | pag,CO,cs);
}

void insere_space(unsigned int t, __bit cs){
	unsigned char i;
	for(i = 0; i <t; i++)
		esc_glcd(0,DA,cs);
}

void limpa_glcd(__bit cs){
	unsigned char i, j;
	for(i = 0; i < 8; i++){
		conf_y(0,cs);
		conf_pag(i,cs);
		for(j = 0; j < 64; j++)
			esc_glcd(0,DA,cs);	
	}	
}

void putchar(char c){
	unsigned char lin_mat;
	__bit lado;
	static unsigned char cont_car = 0;
	if(c <9){
		conf_pag(c-1,ESQ);
		conf_pag(c-1,DIR);
		conf_y(c-1,ESQ);
		conf_y(c-1,DIR);
		cont_car = 0;
	}
	else{
		if(cont_car < 8)
			lado = ESQ;
		else
			lado = DIR;
		lin_mat = c -32;
		esc_glcd(fonte[lin_mat][0],DA,lado);
		esc_glcd(fonte[lin_mat][1],DA,lado);
		esc_glcd(fonte[lin_mat][2],DA,lado);
		esc_glcd(fonte[lin_mat][3],DA,lado);
		esc_glcd(fonte[lin_mat][4],DA,lado);
		insere_space(3,lado);
		cont_car++;
	}
	
}

/////////////////////end  of GLCD//////////////////

void main(){	
	Init_Device();
	SFRPAGE=LEGACY_PAGE;
	init_glcd();
	limpa_glcd(ESQ);
	limpa_glcd(DIR);
	conf_y(0,DIR);
	conf_pag(0,DIR);
	conf_y(0,ESQ);
	conf_pag(0,ESQ);
	while(1){
			ReadTemperature();
			Tempprocess();
			printf_fast_f("\x01%f",word1);
	}
}